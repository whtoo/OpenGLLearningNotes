{"version":3,"sources":["bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","copyVideo","url","video","playing","timeUpdate","gl","texture","checkReady","document","createElement","autoplay","muted","loop","addEventListener","src","play","requestAnimationFrame","render","now","internalFormat","srcFormat","srcType","RGBA","UNSIGNED_BYTE","bindTexture","TEXTURE_2D","texImage2D","window","onload"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEA,IAGMK,EAEgBC,EACdC,EACAC,EACAC,EAmDFC,EACAC,EAEAJ,EAvCF,SAASK,IACHJ,GAAWC,IACbJ,GAAY,GAtBdA,GAAY,EAyDZM,EADAD,EAAK,KAtDWJ,EAyDG,cAxDjBC,EAAQM,SAASC,cAAc,SAE/BL,EADAD,GAAU,EAEdD,EAAMQ,UAAW,EACjBR,EAAMS,OAAQ,EACdT,EAAMU,MAAO,EACbV,EAAMW,iBAAiB,UAAW,WAChCV,GAAU,EACVI,MACC,GACHL,EAAMW,iBAAiB,aAAc,WACnCT,GAAa,EACbG,MACC,GACHL,EAAMY,IAAMb,EACZC,EAAMa,OAyCJb,EAjCKA,EAmDTc,sBAbA,SAASC,EAAOC,GAEd,IAnBqBb,EAAIC,EAASJ,EAE9BiB,EACAC,EACAC,EAcJH,GAAO,KAIHlB,IAtBqBM,EAuBLA,EAvBcJ,EAuBLA,EArBzBiB,GAFiBd,EAuBLA,GArBQiB,KACpBF,EAAYf,EAAGiB,KACfD,EAAUhB,EAAGkB,cACjBlB,EAAGmB,YAAYnB,EAAGoB,WAAYnB,GAC9BD,EAAGqB,WAAWrB,EAAGoB,WALL,EAKwBN,EAAgBC,EAAWC,EAASnB,IAqBxEc,sBAAsBC,KAQ1BU,OAAOC,OAAS,cAEd,KAAK,GAAG,CAAC","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar TSG;\n\n(function (TSG) {\n  var copyVideo = false;\n\n  function setupVideo(url) {\n    var video = document.createElement('video');\n    var playing = false;\n    var timeUpdate = false;\n    video.autoplay = true;\n    video.muted = true;\n    video.loop = true;\n    video.addEventListener('playing', function () {\n      playing = true;\n      checkReady();\n    }, true);\n    video.addEventListener('timeupdate', function () {\n      timeUpdate = true;\n      checkReady();\n    }, true);\n    video.src = url;\n    video.play();\n\n    function checkReady() {\n      if (playing && timeUpdate) {\n        copyVideo = true;\n      }\n    }\n\n    return video;\n  }\n\n  function initTexture(gl) {\n    var texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    var level = 0;\n    var internalFormat = gl.RGBA;\n    var width = 1;\n    var height = 1;\n    var boarder = 0;\n    var srcFormat = gl.RGBA;\n    var srcType = gl.UNSIGNED_BYTE;\n    var pixel = new Uint8Array([0, 0, 255, 255]);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, boarder, srcFormat, srcType, pixel);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    return texture;\n  }\n\n  function updateTexture(gl, texture, video) {\n    var level = 0;\n    var internalFormat = gl.RGBA;\n    var srcFormat = gl.RGBA;\n    var srcType = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, video);\n  }\n\n  var gl = null;\n  var texture = null; //initTexture(gl)\n\n  var video = setupVideo('Firefox.mp4');\n  var then = 0;\n  var programeInfo = null;\n  var buffers = null;\n\n  function render(now) {\n    now *= 0.001;\n    var deltaTime = now - then;\n    then = now;\n\n    if (copyVideo) {\n      updateTexture(gl, texture, video);\n    }\n\n    drawScene(gl, programeInfo, buffers, texture, deltaTime);\n    requestAnimationFrame(render);\n  }\n\n  requestAnimationFrame(render);\n\n  function drawScene(gl, programeInfo, buffers, texture, deltaTime) {}\n})(TSG || (TSG = {}));\n\nwindow.onload = function () {};\n\n},{}]},{},[1]);\n"]}